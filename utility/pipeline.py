# This file is designed based on MlFlow tutorial
# https://mlflow.org/docs/latest/getting-started/intro-quickstart/index.html

import numpy as np
from typing import Union
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

def generate_model_name() -> str:
    """Generate a model name based on the current time

    Returns:
        str: model name
    """
    # Generate a random hex string as the model name
    return hex(np.random.randint(0, 2**31 - 1))[2:]  # Use a smaller max value

def data_preprocessing() -> tuple[np.ndarray]:
    """Generate digits dataset's train and test dataset

    Returns:
        Tuple[np.ndarray]: X_train, X_test, y_train, y_test generated by sklearn
        train_test_split function.
    """
    # Load the digits dataset
    X, y = datasets.load_digits(
        return_X_y=True
    ) 

    # Split the data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.7, random_state=42
    )

    return X_train, X_test, y_train, y_test


def train_logistic_regression(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict,
) -> LogisticRegression:
    lr = LogisticRegression(**params)
    lr.fit(X_train, y_train)
    print("âœ… LogisticRegression training complete!")
    return lr


def train_random_forest(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42},
) -> RandomForestClassifier:
    """Function that generates a trained random forest classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest classifier

    Returns:
        RandomForestClassifier: Trained sklearn random forest model
    """
    # Train the model
    rf = RandomForestClassifier(**params)
    rf.fit(X_train, y_train)
    return rf


def train_random_forest_regressor(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42},
) -> RandomForestRegressor:
    """Function that generates a trained random forest regressor model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest regressor

    Returns:
        RandomForestRegressor: Trained sklearn random forest regressor model
    """
    # Train the model
    rf_reg = RandomForestRegressor(**params)
    rf_reg.fit(X_train, y_train)
    return rf_reg


def train_decision_tree(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"max_depth": 5, "random_state": 42},
) -> DecisionTreeClassifier:
    """Function that generates a trained decision tree classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the decision tree classifier

    Returns:
        DecisionTreeClassifier: Trained sklearn decision tree model
    """
    # Train the model
    dt = DecisionTreeClassifier(**params)
    dt.fit(X_train, y_train)
    return dt


from sklearn.metrics import accuracy_score

def evaluation(X_test, y_test, model):
    """
    Evaluates the trained model and returns accuracy.
    """
    if not hasattr(model, "predict"):  # Ensure model is an actual classifier
        raise ValueError("The provided model does not have a predict() method. Check if the model is trained correctly.")

    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    return accuracy
